import tkinter as tk     #for the graphical user interface
import threading         #to run more than one thread at one time
import random            #to generate unpredictable numbers
import time              #to keep track of the time elapsed


class speedTyping:

    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Speed Typing Test")
        self.root.geometry("800x600")
        self.root.config(background = "black")
        self.frame = tk.Frame(self.root)

        self.text = open("scratch.txt", "r").read().split("\n")

        #to create a label to place the text
        self.label = tk.Label(self.frame,background ="white", text = random.choice(self.text), font = ("Helventica",18))
        self.label.grid(row = 0, column =0, columnspan = 2, padx=5, pady=5)

        #to create the text box
        self.entry = tk.Entry(self.frame, background ="black", width = 40, font = ("Helventica",24))
        self.entry.grid(row =1, column = 0, columnspan =2, padx=5, pady=10)

        self.entry.bind("<KeyPress>", self.start)

        #to start the speed test when the user starts typing
        self.speed = tk.Label(self.frame, background = "white",text="Speed: \n0.00 CPS\n0.00 CPM\n0.00 WPS\n0.00 WPS", font=("Helventica", 18))
        self.speed.grid ( row=2, column=0, columnspan=2, padx=5, pady=10 )

        #a button to reset
        self.resetButton = tk.Button(self.frame, background = "white",text="Reset", command=self.reset, font = ("Helventica",24))
        self.resetButton.grid(row = 3, column=0, columnspan=2, padx=5, pady=10)

        self.frame.pack(expand = True)

        #counter for the application
        self.counter = 0
        self.running = False

        self.root.mainloop()

    def start(self, event) :
        if not self.running :
            if not event.keycode in [16, 17, 18] :
                self.running = True
                t = threading.Thread ( target=self.time_thread )
                t.start ()
            if not self.label.cget ( 'text' ).startswith ( self.entry.get () ) :
                    self.entry.config ( fg="red" )
            else :
                self.entry.config ( fg="black" )
            if self.entry.get () == self.entry.cget ( 'text' )[:-1] :
                self.running = False
                self.entry.config ( fg="green" )

    def time_thread (self):
        while self.running:
            time.sleep(0.1)
            self.counter +=0.1
            cps = len(self.entry.get())/self.counter
            cpm = cps*60
            wps = len(self.entry.get().split(" "))/self.counter
            wpm = wps*60
            self.label.config(text = f"Speed :\n{cps:.2f} CPS\n{cpm:.2f} CPM\n{wps:.2f} WPS\n{wpm:.2f} WPM")

    def reset(self):
        self.running= False
        self.counter = 0
        self.label.config(text="Speed: \n0.00 CPS\n0.00 CPM\n0.00 WPS\n0.00 WPM")
        self.label.config(text = random.choice(self.text))
        self.entry.delete(0, tk.END)


speedTyping().running()
